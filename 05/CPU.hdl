// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Not(in=instruction[15], out=ARun);   // 是否為 A 指令

    Mux16(a=instruction, b=ALUOut, sel=instruction[15], out=MInst);    // 讀取 A 或 傳入 上一個 ALUout

    Or(a=ARun, b=instruction[5], out=Are);  // ARegister 是否執行
    ARegister(in=MInst, load=Are, out=AreOut, out[0..14]=addressM);

    Mux16(a=AreOut, b=inM, sel=instruction[12], out=MinM);

    And(a=instruction[15], b=instruction[4], out=DRun); // DRegister 是否執行
    DRegister(in=ALUOut, load=DRun, out=DreOut);

    ALU(x=DreOut, y=MinM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, out=outM, zr=zr, ng=ng);

    And(a=instruction[3], b=instruction[15], out=writeM);   // 是否讀取 M

    And(a=zr, b=instruction[1], out=jeq);   // JGQ
    And(a=ng, b=instruction[2], out=jlt);   // JLT

    Or(a=zr, b=ng, out=J1);
    Not(in=J1, out=J2);
    And(a=J2, b=instruction[0], out=jgt); // JGT

    Or(a=jeq, b=jlt, out=CJ1);
    Or(a=jgt, b=CJ1, out=CJ2);
    And(a=instruction[15], b=CJ2, out=CJ3); // 為 C 指令時運作

    PC(in=AreOut, reset=reset, inc=true,load=CJ3,out[0..14]=pc);
}